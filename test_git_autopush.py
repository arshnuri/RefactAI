#!/usr/bin/env python3
"""
Git Auto-Push Test Script
Tests the automatic Git push functionality after refactoring
"""

import os
import sys
import subprocess
import tempfile
import shutil
from pathlib import Path

def create_test_repo():
    """Create a temporary Git repository for testing"""
    # Create temporary directory
    test_dir = tempfile.mkdtemp(prefix="refactai_git_test_")
    original_dir = os.getcwd()
    
    try:
        os.chdir(test_dir)
        
        # Initialize Git repository
        subprocess.run(['git', 'init'], check=True, capture_output=True)
        
        # Configure Git user (required for commits)
        subprocess.run(['git', 'config', 'user.name', 'RefactAI Test'], check=True)
        subprocess.run(['git', 'config', 'user.email', 'test@refactai.com'], check=True)
        
        # Create a sample Python file
        sample_code = '''def hello_world():
    print("Hello, World!")
    x = 1
    y = 2
    z = x + y
    return z

if __name__ == "__main__":
    result = hello_world()
    print(f"Result: {result}")
'''
        
        with open('sample.py', 'w') as f:
            f.write(sample_code)
        
        # Initial commit
        subprocess.run(['git', 'add', '.'], check=True)
        subprocess.run(['git', 'commit', '-m', 'Initial commit'], check=True)
        
        print(f"✅ Test repository created: {test_dir}")
        return test_dir
        
    except Exception as e:
        os.chdir(original_dir)
        shutil.rmtree(test_dir, ignore_errors=True)
        raise e

def test_git_status_check():
    """Test Git status checking functionality"""
    print("🧪 Testing Git status check...")
    
    test_dir = None
    original_dir = os.getcwd()
    
    try:
        test_dir = create_test_repo()
        os.chdir(test_dir)
        
        # Import the Git hook module
        sys.path.insert(0, original_dir)
        
        import importlib.util
        spec = importlib.util.spec_from_file_location("git_hook_interactive", 
                                                    os.path.join(original_dir, "git-hook-interactive.py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        hook = module.InteractiveGitHook()
        git_status = hook.check_git_status()
        
        # Verify status
        assert git_status['is_git_repo'] == True, "Should detect Git repository"
        assert git_status['user_name'] == 'RefactAI Test', "Should detect configured user name"
        assert git_status['user_email'] == 'test@refactai.com', "Should detect configured user email"
        assert git_status['can_push'] == False, "Should detect no remote (can't push)"
        
        print("✅ Git status check test passed!")
        return True
        
    except Exception as e:
        print(f"❌ Git status check test failed: {e}")
        return False
        
    finally:
        os.chdir(original_dir)
        if test_dir:
            shutil.rmtree(test_dir, ignore_errors=True)

def test_commit_creation():
    """Test automatic commit creation"""
    print("🧪 Testing commit creation...")
    
    test_dir = None
    original_dir = os.getcwd()
    
    try:
        test_dir = create_test_repo()
        os.chdir(test_dir)
        
        # Modify the file
        with open('sample.py', 'a') as f:
            f.write('\n# Refactored comment\n')
        
        # Import the Git hook module
        sys.path.insert(0, original_dir)
        
        import importlib.util
        spec = importlib.util.spec_from_file_location("git_hook_interactive", 
                                                    os.path.join(original_dir, "git-hook-interactive.py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        hook = module.InteractiveGitHook()
        
        # Test staging and commit (without push)
        subprocess.run(['git', 'add', '.'], check=True)
        
        commit_msg = """refactor: Auto-refactored repository using RefactAI

- Processed with OpenRouter API + AST validation
- Model: anthropic/claude-3.5-sonnet
- Timestamp: 2025-08-01 12:00:00
- Scope: test repository

Generated by RefactAI Interactive Git Hook"""
        
        subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
        
        # Verify commit was created
        result = subprocess.run(['git', 'log', '--oneline', '-1'], 
                              capture_output=True, text=True, check=True)
        
        assert 'refactor: Auto-refactored' in result.stdout, "Commit should contain refactor message"
        
        print("✅ Commit creation test passed!")
        return True
        
    except Exception as e:
        print(f"❌ Commit creation test failed: {e}")
        return False
        
    finally:
        os.chdir(original_dir)
        if test_dir:
            shutil.rmtree(test_dir, ignore_errors=True)

def show_git_workflow_example():
    """Show example of the enhanced Git workflow"""
    print("\n" + "="*60)
    print("🚀 ENHANCED GIT WORKFLOW EXAMPLE")
    print("="*60)
    
    workflow = """
1. 👩‍💻 Developer makes changes:
   git add .
   git commit -m "Add new feature"

2. 🔄 Developer pushes (triggers RefactAI hook):
   git push origin main

3. 🤖 RefactAI Interactive Hook:
   ┌─────────────────────────────────────┐
   │ RefactAI Git Hook - Pre-Push        │
   │                                     │
   │ 🧪 Testing OpenRouter API...       │
   │ ✅ OpenRouter API connection OK     │
   │                                     │
   │ Refactoring scope: [changed/full]   │
   │ ❯ full-repo                         │
   │                                     │
   │ 🔍 Found 15 code files             │
   │ Proceed with refactoring? [Y/n] Y   │
   │                                     │
   │ 🔄 Processing files...              │
   │ ████████████████████ 100% (15/15)  │
   │ ✅ All files refactored!            │
   │                                     │
   │ 📡 Git Status:                      │
   │   👤 User: John Doe <j@example.com> │
   │   🌐 Remote: origin/main            │
   │                                     │
   │ Auto-push changes? [Y/n] Y          │
   │                                     │
   │ 🚀 Auto-pushing changes...          │
   │ ✅ Successfully pushed!             │
   └─────────────────────────────────────┘

4. 🎉 Result:
   - Original code committed
   - Refactored code auto-committed
   - Everything pushed to remote
   - No manual intervention needed!

5. 📊 Git History:
   abc123 refactor: Auto-refactored repository using RefactAI
   def456 Add new feature (original commit)
"""
    
    print(workflow)

def main():
    """Run all Git automation tests"""
    print("🚀 RefactAI Git Auto-Push Testing Suite\n")
    
    tests = [
        test_git_status_check,
        test_commit_creation
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print(f"📊 Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("🎉 All Git automation tests passed!")
        show_git_workflow_example()
        return 0
    else:
        print("❌ Some Git automation tests failed.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
